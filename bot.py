import asyncio
import json
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message

import html_parse
import kb
import num
import smsc
import smsc_api
import yapi

# logging.basicConfig(level=logging.INFO, filename="log/py_bot.log", filemode='w', format="%(asctime)s %(levelname)s %(message)s")
logging.basicConfig(level=logging.INFO)
logging.info('An Info')
logging.error('An Error')


with open("source/info.json", "r", encoding="utf-8") as file:
    file = json.load(file)

with open('source/id_list.txt', 'r', encoding='utf-8') as idlist:
    idlist = idlist.read()
    idlist = idlist.split('\n')
    idlist = list(map(int, idlist))


API_TOKEN = file["telegram_token"]

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

mnc_operator = {"mts": "1", "megafon": "2", "t2": "25", "beeline": "99"}


class SetData(StatesGroup):
    ph_get = State()
    ph_menu = State()
    ph_smsc = State()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±–µ—â–Ω–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é /start"""
    if message.from_user.id not in idlist:
        return message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è \n–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É",  # reply_markup=builder.as_markup()
    )


# –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ë–°
# @dp.callback_query(F.data == "bs_info")
# async def send_bs_info(callback: types.CallbackQuery, state: FSMContext):
#     """–í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∫–æ–¥–∞ mnc"""
#     await callback.message.answer("–í—ã–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb.get_keyboard())
#     await state.set_state(SetData.ch_operator)


# @dp.callback_query(F.data.startswith("operator_"))
# async def set_mnc_operator(callback: types.CallbackQuery, state: FSMContext):
#     """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–º—è—Ç–∏ MNC –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""

#     action = callback.data.split("_")[1]

#     if action == "mts":
#         await state.update_data(mnc=mnc_operator.get("mts"))
#     elif action == "megafon":
#         await state.update_data(mnc=mnc_operator.get("megafon"))
#     elif action == "t2":
#         await state.update_data(mnc=mnc_operator.get("t2"))
#     elif action == "beeline":
#         await state.update_data(mnc=mnc_operator.get("beeline"))
#     await callback.message.answer(
#         "–í–≤–µ–¥–∏—Ç–µ LAC CID –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª \n–î–ª—è –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ë–°"
#     )

#     await state.set_state(SetData.ch_laccid)


@dp.message(F.text.regexp(r"^(1|2|25|99) (\d{1,8}) (\d+)"))
async def api_locator(message: Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç mnc lac cid –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –Ø–Ω–¥–µ–∫—Å.–õ–æ–∫–∞—Ç–æ—Ä"""
    if message.from_user.id not in idlist:
        return message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    bs_info = message.text.split("\n")
    bs_list = []
    yapi_info = []
    pretty_bs_list = []
    count = 0
    for bs in bs_info:
        bs_list.append(bs.split(" "))
    for bs in bs_list:
        mnc = bs[0]
        lac = bs[1]
        cid = bs[2]
        yapi_info.append(yapi.push_api(lac=lac, cid=cid, mnc=mnc))
    for bs in yapi_info:
        pretty_bs_list.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n{count+1}. {lac}-{cid}   |   `{bs['coord'].split('-')[0]} {bs['coord'].split('-')[1]}`")
        count +=1
    html_parse.constructor(bslist=yapi_info)
    document = FSInputFile("test2.html", filename="map.html")
    await message.answer('\n'.join(pretty_bs_list), parse_mode="Markdown")
    await bot.send_document(chat_id=message.chat.id, document=document)


# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
# @dp.callback_query(F.data == "phone_info")
# async def get_phone(callback: types.CallbackQuery, state: FSMContext):
#     """–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
#     await callback.message.answer(
#         "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (10 —Ü–∏—Ñ—Ä) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:"
#     )
#     await state.set_state(SetData.ph_get)


@dp.message(F.text.regexp(r"^(\+7|7|8|)?\d{10}"))
async def menu_phone(message: Message, state: FSMContext):
    """–ú–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–±.–Ω–æ–º–µ—Ä–æ–º"""
    if message.from_user.id not in idlist:
        return message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    await state.update_data(phone=message.text)
    phone = message.text[-10:]
    info = num.check_phone(phone)

    await message.answer(
        f"–ù–æ–º–µ—Ä: <b>{phone}</b> \n–û–ø–µ—Ä–∞—Ç–æ—Ä: {info['operator']}\n–†–µ–≥–∏–æ–Ω: {info['region']}\n"
        + f"\n–ë–∞–ª–∞–Ω—Å SMSC: <b>{smsc.get_balance()} —Ä—É–±</b>\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å HLR-–∑–∞–ø—Ä–æ—Å–∞: {'üî¥' if info['operator'].lower() in '–º–µ–≥–∞—Ñ–æ–Ω' else 'üü¢'}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤:  ",
        reply_markup=kb.ph_menu(phone=phone),
        parse_mode="HTML",
    )
    await state.set_state(SetData.ph_menu)


# @dp.callback_query(F.data == "phmenu_smsc")
# async def smsc_phone(callback: types.CallbackQuery, state: FSMContext):
#     ph = await state.get_data()
#     phone = ph["phone"][-10:]
#     await callback.message.answer(
#         f"–ù–æ–º–µ—Ä: {phone} \n –ë–∞–ª–∞–Ω—Å: {smsc.get_balance()} \n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#         reply_markup=kb.smsc_menu(),
#     )
#     await state.set_state(SetData.ph_smsc)


@dp.callback_query(F.data.startswith("smsc_"))
async def smsc_action(callback: CallbackQuery, state: FSMContext):
    ph = await state.get_data()
    phone = ph["phone"][-10:]

    action = callback.data.split("_")[1]
    print(action, 'action')

    if action == "ping":
        ping = await smsc.send_ping(phone=phone)
        await state.update_data(ping=ping)
        await callback.message.answer(
            smsc.pretty_update_ping(smsc.update_ping(ping=ping, phone=phone)),
            reply_markup=kb.update_status,
            parse_mode="HTML",
        )
    elif action == "hlr":
        await callback.message.answer(smsc.send_hlr(phone=phone), parse_mode="HTML")


@dp.callback_query(F.data == "update_ping")
async def update_ping(callback: CallbackQuery, state: FSMContext):
    ph = await state.get_data()
    print(ph, 'ph_info')
    phone = ph["phone"][-10:]
    print(phone, "phone")
    ping = ph["ping"]
    update_ping_info = await smsc.update_ping(ping, phone)
    print(update_ping_info)
    print(pretty_update_ping(update_ping_info))

    # await Bot.edit_message_text(smsc.pretty_update_ping(update_ping(ping, phone)), callback.message.chat.id, callback.message.message_id)
    await callback.message.answer(
        smsc.pretty_update_ping(update_ping_info),
        reply_markup=kb.update_status,
        parse_mode="HTML")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    if message.from_user.id not in idlist:
        return message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    await message.answer("<b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞:</b>\n\n" + \
                         "üì± <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n" + \
                         "‚îú üìù <b>79994492792</b> - –ü–†–ò–ú–ï–†\n" + \
                         "‚îú ‚ÑπÔ∏è –õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç (+7..., 8..., 9...)\n" + \
                         "‚îú üìß Ping SMS - –æ—Ç–ø—Ä–∞–≤–∫–∞ Ping SMS\n" + \
                         "‚îú üíå HLR - –æ—Ç–ø—Ä–∞–≤–∫–∞ HLR-–∑–∞–ø—Ä–æ—Å–∞\n" + \
                         "‚îú üü¢ WhatsApp - –ø–µ—Ä–µ—Ö–æ–¥ –≤ WhatsApp\n" + \
                         "‚îî üîµ Telegram - –ø–µ—Ä–µ—Ö–æ–¥ –≤ Telegram\n\n" + \
                         "üì° <b>–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏</b>\n" + \
                         "‚îú üìù <b>MNC LAC CID</b> - –ü–†–ò–ú–ï–†\n" + \
                         "‚îú ‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å–æ <b>—Å–ø–∏—Å–∫–∞–º–∏ –ë–°</b>\n"
                         "‚îú ‚ÑπÔ∏è MNC - 1, 2, 25, 99\n" + \
                         "‚îú ‚ÑπÔ∏è LAC - –î–æ 8 —Ü–∏—Ñ—Ä\n" + \
                         "‚îú ‚ÑπÔ∏è CID - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä\n" + \
                         "‚îî üó∫Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç <b>–ë–∞–∑–æ–≤—ã—Ö –°—Ç–∞–Ω—Ü–∏–π</b>",
                         parse_mode="HTML"
                         )


@dp.message(Command('balance'))
async def cmd_balance(message: Message):
    if message.from_user.id not in idlist:
        return message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {smsc_api.SMSC_LOGIN}!\n–ë–∞–ª–∞–Ω—Å SMSC: <b>{smsc.get_balance()} —Ä—É–±</b>", parse_mode="HTML")

@dp.message(Command('id'))
async def cmd_get_id(message:Message):
    # if message.from_user.id not in idlist:
    #     return message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    await message.answer(f"–¢–≤–æ–π Telegram ID: `{message.from_user.id}`", parse_mode="Markdown")

@dp.message(F.text.regexp(r"."))
async def try_again(message: Message):
    if message.from_user.id not in idlist:
        return message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    await message.answer('–ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')

# –ó–ê–ü–£–°–ö –ë–û–¢–ê
async def main():
    """–ë–∞–∑–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
