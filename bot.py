import asyncio
import json
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message

import html_parse
import kb
import num
import smsc
import smsc_api
import yapi
import alg_luhn
import saveru
import smscenter
import pw_preview

logging.basicConfig(
    level=logging.INFO,
    filename="/home/user/bot/lcbot/log/py_bot.log",
    filemode="w",
    format="%(asctime)s %(levelname)s %(message)s",
)
# logging.basicConfig(level=logging.INFO)
logging.info("An Info")
logging.error("An Error")


with open("/home/user/bot/lcbot/source/info.json", "r", encoding="utf-8") as file:
    file = json.load(file)

with open("/home/user/bot/lcbot/source/id_list.txt", "r", encoding="utf-8") as idlist:
    idlist = idlist.read()
    idlist = idlist.split("\n")
    idlist = list(map(int, idlist))


API_TOKEN = file["telegram_token"]

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


mnc_operator = {"mts": "1", "megafon": "2", "t2": "20", "beeline": "99"}


class SetData(StatesGroup):
    ph_get = State()
    ph_menu = State()
    ph_smsc = State()
    smsc_menu = State()


# –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ë–°


@dp.message(F.text.regexp(r"^(1|2|20|99) (\d{1,8}) (\d+)"))
async def api_locator(message: Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç mnc lac cid –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –Ø–Ω–¥–µ–∫—Å.–õ–æ–∫–∞—Ç–æ—Ä"""
    if message.from_user.id not in idlist:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    bs_info = message.text.split("\n")
    bs_list = []
    yapi_info = []
    pretty_bs_list = []
    lc_list = []
    count = 0
    for bs in bs_info:
        bs_list.append(bs.split(" "))
    for bs in bs_list:
        mnc = bs[0]
        lac = bs[1]
        cid = bs[2]
        lc_list.append(f"{lac}-{cid}")
        yapi_info.append(yapi.push_api(lac=lac, cid=cid, mnc=mnc))
    for bs in yapi_info:
        if bs["coord"] != "00.000000-00.000000":
            pretty_bs_list.append(
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n{count+1}. {lc_list[count]}   |   `{bs['coord'].split('-')[0]} {bs['coord'].split('-')[1]}`"
            )
        else:
            pretty_bs_list.append(
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n{count+1}. {lc_list[count]}   |   –ë–° –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–õ–æ–∫–∞—Ç–æ—Ä–µ"
            )
        count += 1
    html_parse.constructor(bslist=yapi_info, lclist=lc_list)
    await pw_preview.main()
    photo = FSInputFile("/home/user/bot/lcbot/source/screen.png", filename="sceen.png")
    document = FSInputFile("/home/user/bot/lcbot/test2.html", filename="map.html")
    await message.answer("\n".join(pretty_bs_list), parse_mode="Markdown")
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    await bot.send_document(chat_id=message.chat.id, document=document)


# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å IMEI —Ç–µ–ª–µ—Ñ–æ–Ω–∞


@dp.message(F.text.regexp(r"\b\d{14}\b"))
async def check_imei(message: Message, state: FSMContext):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å IMEI-–Ω–æ–º–µ—Ä–æ–º"""
    imei = message.text[:14]
    full_imei = alg_luhn.luhn(imei)
    loop = asyncio.get_event_loop()
    # imei_device = await loop.run_in_executor(None, db.check_imei, imei)
    imei_device = await loop.run_in_executor(None, yapi.check_imei, full_imei)
    if imei_device == None:
        result = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ üî¥"
    else:
        result = "\n".join(imei_device)
        device = imei_device[1].split(": ")[1] + " " + imei_device[3].split(": ")[1]
    await message.answer(
        result,
        reply_markup=kb.imei_keyboard(imei=full_imei, imei_device=device),
        parse_mode="Markdown",
    )


@dp.message(F.text.regexp(r"\b\d{15}\b"))
async def no_imei(message: Message):
    await message.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ IMEI-–Ω–æ–º–µ—Ä, –≤–≤–µ–¥–∏—Ç–µ 14 —Ü–∏—Ñ—Ä")


# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞


@dp.message(F.text.regexp(r"^(\+7|7|8|)?\d{10}"))
async def menu_phone(message: Message, state: FSMContext):
    """–ú–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–±.–Ω–æ–º–µ—Ä–æ–º"""
    loop = asyncio.get_event_loop()
    if message.from_user.id not in idlist:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    if (
        len(message.text.split(" ")) > 1
        and message.text.split(" ")[1].lower() == "—Å–º—Å—Ü"
    ):
        phone = message.text.split(" ")[0][-10:]
        sms_id = await loop.run_in_executor(None, smsc.send_ping, phone)
        await asyncio.sleep(60)
        info = await loop.run_in_executor(None, smsc.update_status, sms_id, phone)
        await message.answer(
            f"‚è∞–¢–ê–ô–ú–ï–†‚è∞\nPing-–∑–∞–ø—Ä–æ—Å –Ω–∞ <b>{info[4]}</b>\n–°—Ç–∞—Ç—É—Å –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {info[7]}\n–ë–∞–ª–∞–Ω—Å: {smsc.get_balance()}",
            parse_mode="HTML",
            disable_notification=True,
        )
    elif (
        len(message.text.split(" ")) > 1
        and message.text.split(" ")[1].lower() == "–º–æ–¥–µ–º"
    ):
        phone = message.text.split(" ")[0][-10:]
        phone_info = num.check_phone(phone)
        if phone_info["operator"].lower() == "–±–∏–ª–∞–π–Ω":
            flag = 2
        else:
            flag = 1
        file_name = await loop.run_in_executor(None, smscenter.sent_sms, phone, flag)
        await asyncio.sleep(60)
        message_id = await loop.run_in_executor(
            None, smscenter.get_message_id, file_name
        )
        mod_ping_info = await loop.run_in_executor(
            None,
            smscenter.check_status,
            message_id["message_id"],
            message_id["filename"],
            message_id["GSM"],
        )
        if len(mod_ping_info) < 11 and len(mod_ping_info) > 5:
            await message.answer(
                text=f"‚è∞–¢–ê–ô–ú–ï–†‚è∞\nPing –Ω–∞ –Ω–æ–º–µ—Ä {mod_ping_info['To'][0]}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {mod_ping_info['Sent'][0]}\n–°—Ç–∞—Ç—É—Å: üü° –ü–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n\nMessage_id: {mod_ping_info['Message_id'][0]}\nModem: {mod_ping_info['Modem'][0]}",
                parse_mode="HTML",
            )
        elif len(mod_ping_info) > 11:
            await message.answer(
                text=f"‚è∞–¢–ê–ô–ú–ï–†‚è∞\nPing –Ω–∞ –Ω–æ–º–µ—Ä {mod_ping_info['From'][0]}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {mod_ping_info['Sent'][0]}\n–ü—Ä–∏–Ω—è—Ç–æ:{mod_ping_info['Received'][0]}\n–°—Ç–∞—Ç—É—Å: üü¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n\nMessage_id: {mod_ping_info['Message_id'][0]}\nModem: {mod_ping_info['Modem'][0]}",
                parse_mode="HTML",
            )

    else:
        await state.update_data(phone=message.text)
        phone = message.text[-10:]
        info = num.check_phone(phone)
        try:
            info_saveru = await loop.run_in_executor(
                None, saveru.check_phone, int(f"7{phone}")
            )
        except FileNotFoundError:
            info_saveru = None

        text = f"–ó–∞–ø—Ä–æ—Å: <b>{phone}</b> \n–û–ø–µ—Ä–∞—Ç–æ—Ä: {info['operator']}\n–†–µ–≥–∏–æ–Ω: {info['region']}\n\n"
        try:
            text += f"–ë—ã–≤—à–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {info['old_operator']}\n"
        except KeyError:
            pass
        # text += f"\n–ë–∞–ª–∞–Ω—Å SMSC: <b>{smsc.get_balance()} —Ä—É–±</b>\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å HLR-–∑–∞–ø—Ä–æ—Å–∞:"
        # text += f"{'üî¥' if info['operator'].lower() in '–º–µ–≥–∞—Ñ–æ–Ω' else 'üü¢'} \n\n"
        if info_saveru is not None:
            text += f"üìï<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞:</b>\n {', '.join(info_saveru['name'])}\n\n"
        await message.answer(
            text,
            reply_markup=kb.ph_menu(phone=phone),
            parse_mode="HTML",
        )
        await state.set_state(SetData.ph_menu)


@dp.callback_query(F.data.startswith("smsc_"))
async def smsc_action(callback: CallbackQuery, state: FSMContext):
    ph = await state.get_data()
    phone = ph["phone"][-10:]

    action = callback.data.split("_")[1]

    if action == "ping":
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, smsc.send_ping, phone)
        await state.update_data(sms_id=result)
        await callback.message.answer(
            f'Ping –Ω–∞  <b>{phone}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"',
            reply_markup=kb.update_ping_status(),
            parse_mode="HTML",
        )

    elif action == "hlr":
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, smsc.send_hlr, phone)
        await state.update_data(sms_id=result)
        await callback.message.answer(
            f'HLR –Ω–∞ <b>{phone}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"',
            reply_markup=kb.update_hlr_status(),
            parse_mode="HTML",
        )

    elif action == "modemping":
        loop = asyncio.get_event_loop()
        phone_info = num.check_phone(phone)
        if (
            phone_info["operator"].lower() == "–±–∏–ª–∞–π–Ω"
            or phone_info["operator"].lower() == "–≤—ã–º–ø–µ–ª–∫–æ–º"
        ):
            flag = 2
        else:
            flag = 1
        file_name = await loop.run_in_executor(None, smscenter.sent_sms, phone, flag)
        await state.update_data(file_name=file_name)
        await callback.message.answer(
            text=f'Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: <b>{phone}</b>\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"',
            reply_markup=kb.update_modem_ping_status(),
            parse_mode="HTML",
        )


@dp.callback_query(F.data == "update_ping_sms_status")
async def update_ping_status(callback: CallbackQuery, state: FSMContext):
    set_info = await state.get_data()
    phone = set_info["phone"][-10:]
    sms_id = set_info["sms_id"]
    loop = asyncio.get_event_loop()
    info = await loop.run_in_executor(None, smsc.update_status, sms_id, phone)
    await callback.message.answer(
        f"Ping-–∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–º–µ—Ä—É: <b>{info[4]}</b> \n–°—Ç–æ–∏–º–æ—Å—Ç—å {info[5]} —Ä—É–±\n–°—Ç–∞—Ç—É—Å: {info[7]}\n–ë–∞–ª–∞–Ω—Å: <b>{smsc.get_balance()} —Ä—É–±</b>\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å'",
        reply_markup=kb.update_ping_status(),
        parse_mode="HTML",
    )


@dp.callback_query(F.data == "update_hlr_sms_status")
async def update_hlr_status(callback: CallbackQuery, state: FSMContext):
    set_info = await state.get_data()
    phone = set_info["phone"][-10:]
    sms_id = set_info["sms_id"]
    loop = asyncio.get_event_loop()
    info = await loop.run_in_executor(None, smsc.update_status, sms_id, phone)
    await callback.message.answer(
        text=f"{info[14]}-–∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–º–µ—Ä—É: <b>{info[12]}</b> \n–°—Ç–æ–∏–º–æ—Å—Ç—å {info[13]} —Ä—É–±\n–°—Ç–∞—Ç—É—Å: {info[15]}\n–ë–∞–ª–∞–Ω—Å: <b>{smsc.get_balance()} —Ä—É–±</b>\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å'",
        reply_markup=kb.update_hlr_status(),
        parse_mode="HTML",
    )


@dp.callback_query(F.data == "update_modem_ping_sms_status")
async def update_modem_ping_status(callback: CallbackQuery, state: FSMContext):
    loop = asyncio.get_event_loop()
    state_info = await state.get_data()
    filename = state_info["file_name"]
    message_id = await loop.run_in_executor(None, smscenter.get_message_id, filename)
    mod_ping_info = await loop.run_in_executor(
        None,
        smscenter.check_status,
        message_id["message_id"],
        message_id["filename"],
        message_id["GSM"],
    )
    print(mod_ping_info)
    if len(mod_ping_info) < 11:
        await callback.message.answer(
            text=f"Ping –Ω–∞ {mod_ping_info['To'][0]}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {mod_ping_info['Sent'][0]}\n–°—Ç–∞—Ç—É—Å: üü° –ü–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n\nMessage_id: {mod_ping_info['Message_id'][0]}\nModem: {mod_ping_info['Modem'][0]}",
            reply_markup=kb.update_modem_ping_status(),
            parse_mode="HTML",
        )
    elif len(mod_ping_info) > 11:
        await callback.message.answer(
            text=f"Ping –Ω–∞ {mod_ping_info['From'][0]}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {mod_ping_info['Sent'][0]}\n–ü—Ä–∏–Ω—è—Ç: {mod_ping_info['Received'][0]}\n–°—Ç–∞—Ç—É—Å: {mod_ping_info['Status']} /statuslist\n\nMessage_id: {mod_ping_info['Message_id'][0]}\nModem: {mod_ping_info['Modem'][0]}",
            reply_markup=kb.update_modem_ping_status(),
            parse_mode="HTML",
        )


@dp.callback_query(F.data == "update_modem_ping_list_status")
async def update_modem_ping_list_status(callback: CallbackQuery):
    print('check!!')
    with open('/home/user/bot/lcbot/source/ping_status_list.txt', 'r') as file:
        file = file.read()
        print(file)
        await bot.answer_callback_query(callback.id, text=file, show_alert=False)


@dp.message(F.text.regexp(r"^([–ê-–Ø]|[–∞-—è]){3,}"))
async def search_fio(message: Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é (–∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), –≤—ã–≥—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id not in idlist:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    loop = asyncio.get_event_loop()
    fio = message.text
    info_saveru_fio = await loop.run_in_executor(None, saveru.check_fio, fio)
    status = info_saveru_fio["status"]
    if status == 0:
        await message.answer(
            "<b>–ó–∞–ø—Ä–æ—Å</b>: {fio}\n\n <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            parse_mode="HTML",
        )
    elif status == 1:
        text = f"–ó–∞–ø—Ä–æ—Å: *{fio}*\n\n*–ò–º–µ–Ω–∞:*\n{info_saveru_fio['result']['name'][0].strip(', ')}\n\n"
        if info_saveru_fio["result"]["phone_number"][0] != "":
            text += (
                f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*\n{info_saveru_fio['result']['phone_number'][0]}\n\n"
            )
        if info_saveru_fio["result"]["birthday_list"][0] != "":
            text += f"*–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:*\n{info_saveru_fio['result']['birthday_list'][0].strip(', ')}\n\n"
        if info_saveru_fio["result"]["address_list"][0] != "":
            text += f"*–ê–¥—Ä–µ—Å–∞:*\n`{info_saveru_fio['result']['address_list'][0].strip(', ')}`\n\n"
        if info_saveru_fio["result"]["email_list"][0] != "":
            text += f"*Email-–∞–¥—Ä–µ—Å–∞:*\n{info_saveru_fio['result']['email_list'][0].strip(', ')}\n\n"
        if info_saveru_fio["result"]["car_list"][0] != "":
            text += f"*–ê–≤—Ç–æ–º–æ–±–∏–ª–∏:*\n{info_saveru_fio['result']['car_list'][0].strip(', ')}\n\n"
        if info_saveru_fio["result"]["car_plate_list"][0] != "":
            text += f"*–ì–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ:*\n{info_saveru_fio['result']['car_plate_list'][0].strip(', ')}"

        await message.answer(text)
    elif status == 2:
        for i in range(len(info_saveru_fio["result"]["name"])):
            text = f"*–û—Ç–≤–µ—Ç ‚Ññ{i+1}*\n–ó–∞–ø—Ä–æ—Å: *{fio}*\n\n"
            text += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞:\n{info_saveru_fio['result']['name'][i].strip(', ')}\n\n"
            if info_saveru_fio["result"]["birthday_list"][i] != "":
                text += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n{info_saveru_fio['result']['birthday_list'][i].strip(', ')}\n\n"
            if info_saveru_fio["result"]["address_list"][i] != "":
                text += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n`{info_saveru_fio['result']['address_list'][i].strip(', ')}`\n\n"
            if info_saveru_fio["result"]["email_list"][i] != "":
                text += f"–í–æ–∑–º–æ–∂–Ω—ã–µ email-–∞–¥—Ä–µ—Å–∞:\n{info_saveru_fio['result']['email_list'][i].strip(', ')}\n\n"
            if info_saveru_fio["result"]["car_list"][i] != "":
                text += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n{info_saveru_fio['result']['car_list'][i].strip(', ')}\n\n"
            if info_saveru_fio["result"]["car_plate_list"][i] != "":
                text += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ:\n{info_saveru_fio['result']['car_plate_list'][i].strip(', ')}"

            await message.answer(text, parse_mode="Markdown")
    elif status == 3:
        document = FSInputFile("/home/user/bot/lcbot/result.csv", filename="result.csv")
        await message.answer(
            f"–ó–∞–ø—Ä–æ—Å: {fio}\n\n–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤\n–û—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞:",
        )
        await bot.send_document(chat_id=message.chat.id, document=document)


# –ë–ª–æ–∫ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏


@dp.message(Command("help"))
async def cmd_help(message: Message):
    if message.from_user.id not in idlist:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await message.answer(
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞:</b>\n\n"
        + "üì± <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n"
        + "‚îú üìù <b>9998887766</b> - –ü–†–ò–ú–ï–†\n"
        + "‚îú ‚ÑπÔ∏è –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö (saverudata)\n"
        + "‚îú ‚ÑπÔ∏è –õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç (+7..., 8..., 9...)\n"
        + "‚îú üìß Ping SMS - –æ—Ç–ø—Ä–∞–≤–∫–∞ Ping SMS\n"
        + "‚îú üíå HLR - –æ—Ç–ø—Ä–∞–≤–∫–∞ HLR-–∑–∞–ø—Ä–æ—Å–∞\n"
        + "‚îú üü¢ WhatsApp - –ø–µ—Ä–µ—Ö–æ–¥ –≤ WhatsApp\n"
        + "‚îî üîµ Telegram - –ø–µ—Ä–µ—Ö–æ–¥ –≤ Telegram\n\n"
        + "<b>‚è∞ –†–∞–±–æ—Ç–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º</b>\n\n"
        + "‚îú–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞:\n"
        + "‚îú9998887766 —Å–º—Å—Ü - Ping —á–µ—Ä–µ–∑ SMSC\n"
        + "‚îî9998887766 –º–æ–¥–µ–º - Ping —á–µ—Ä–µ–∑ –ú–û–î–ï–ú\n\n"
        + "üë®‚Äçüíº <b>–ü–æ–∏—Å–∫ –ø–æ –§–ò–û</b>\n"
        + "‚îú üìù <b>[–§–ê–ú–ò–õ–ò–Ø (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)]</b> [–ò–ú–Ø] - –ü–†–ò–ú–ï–† –ó–ê–ü–†–û–°–ê\n"
        + "‚îî ‚ÑπÔ∏è –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö (saverudata)\n\n"
        + "üÜî –ü–æ–∏—Å–∫ –ø–æ IMEI:\n"
        + "‚îú ‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
        + "‚îú üü£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å IMEI –Ω–∞ imei.info\n"
        + "‚îî üî¥ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –≤ –Ø–Ω–¥–µ–∫—Å–µ\n\n"
        + "üì° <b>–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏</b>\n"
        + "‚îú üìù <b>MNC LAC CID</b> - –ü–†–ò–ú–ï–†\n"
        + "‚îú ‚ÑπÔ∏è –†–∞–±–æ—Ç–∞ —Å–æ <b>—Å–ø–∏—Å–∫–∞–º–∏ –ë–°</b>\n"
        + "‚îú ‚ÑπÔ∏è MNC - 1, 2, 20, 99\n"
        + "‚îú ‚ÑπÔ∏è LAC - –î–æ 8 —Ü–∏—Ñ—Ä\n"
        + "‚îú ‚ÑπÔ∏è CID - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä\n"
        + "‚îî üó∫Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç <b>–ë–°</b>\n\n"
        + "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n /help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å SMSC\n/smsc - –∏–Ω—Ñ–æ –ø–æ SMSC\n/id - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π Telegram ID\n/log - –≤—ã–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏\n",
        parse_mode="HTML",
    )


@dp.message(Command("balance"))
async def cmd_balance(message: Message):
    if message.from_user.id not in idlist:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {smsc_api.SMSC_LOGIN}!\n–ë–∞–ª–∞–Ω—Å SMSC: <b>{smsc.get_balance()} —Ä—É–±</b>",
        parse_mode="HTML",
    )


@dp.message(Command("smsc"))
async def smsc_lk(message: Message):
    if message.from_user.id not in idlist:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{smsc_api.SMSC_LOGIN}</b>!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç SMSC.\n\n–ë–∞–ª–∞–Ω—Å: <b>{smsc.get_balance()} —Ä—É–±</b>\n\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–≤–µ–¥–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        reply_markup=kb.smsc_lk_kb(),
        parse_mode="HTML",
    )


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n–í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n/id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è TelegramID.\n"
    )


@dp.message(Command("id"))
async def cmd_get_id(message: Message):
    # if message.from_user.id not in idlist:
    #     return message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    await message.answer(
        f"–¢–≤–æ–π Telegram ID: `{message.from_user.id}`", parse_mode="Markdown"
    )


@dp.message(Command("log"))
async def get_log(message: Message):
    if message.from_user.id != 303595933:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    document = FSInputFile("/home/user/bot/lcbot/log/py_bot.log", filename="py_bot.log")
    await bot.send_document(chat_id=message.chat.id, document=document)


@dp.message(Command("rebootsms"))
async def reboot_smsserver(message: Message):
    if message.from_user.id not in idlist:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    os.system()


@dp.message(F.text.regexp(r"."))
async def try_again(message: Message):
    if message.from_user.id not in idlist:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await message.answer(
        "–ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )


# –ó–ê–ü–£–°–ö –ë–û–¢–ê
async def main():
    """–ë–∞–∑–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
