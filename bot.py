import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
from aiogram.fsm.state import StatesGroup, State

logging.basicConfig(level=logging.INFO)

API_TOKEN = "6636532520:AAGQKEOSpqJjWdikdzCR8qOHwp2WjLx3N44"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class SetOperator(StatesGroup):
    choose_operator = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±–µ—â–Ω–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é /start"""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
                text= "ü™ô –ë–°",
                callback_data= 'bs_info',
    ))
    await message.answer("–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å–º–æ—Ç—Ä–∏ –≤ /help", reply_markup=builder.as_markup())


@dp.message(Command("help"))
async def help_info(message: types.Message):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /help"""
    await message.answer("/bs - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ë–°\n"
                         "/ping - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ping SMS\n"
                         "/hlr - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å hlr-–∑–∞–ø—Ä–æ—Å\n"
                         "/kody - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ Kody.su"
                         )


def get_keyboard():
    operator_buttons = [
        [
            types.InlineKeyboardButton(text = 'üî¥ –ú–¢–°', callback_data='operator_mts'),
            types.InlineKeyboardButton(text = 'üü¢ –ú–µ–≥–∞—Ñ–æ–Ω', callback_data='operator_megafon'),
            types.InlineKeyboardButton(text = '‚ö´Ô∏è –¢–µ–ª–µ2', callback_data='operator_t2'),
            types.InlineKeyboardButton(text = 'üü° –ë–∏–ª–∞–π–Ω', callback_data='operator_beeline'),
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=operator_buttons)
    return keyboard


@dp.callback_query(F.data == 'bs_info')
async def send_bs_info(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∫–æ–¥–∞ mnc"""
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', reply_markup=get_keyboard())

@dp.callback_query(F.data.startswith('operator_'))
async def set_mnc_operator(callback: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–º—è—Ç–∏ MNC –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    mnc_operator = None

    action = callback.data.split('_')[1]

    if action == 'mts':
        mnc_operator = '1'
    elif action == 'megafon':
        mnc_operator = '2'
    elif action == 't2':
        mnc_operator = '25'
    elif action == 'beeline':
        mnc_operator = '99'
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ LAC CID –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–î–ª—è –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ë–°)')


async def main():
    """–ë–∞–∑–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
